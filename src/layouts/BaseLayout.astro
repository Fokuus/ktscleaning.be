---
// Page transitions disabled as requested
import type { GetImageResult } from 'astro';
import client from "@data/client.json";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import FooterCTA from "@components/FooterCTA.astro";
import "@styles/root.less";
import "@styles/dark.less";
import "@styles/hero.less";
// Import animate.css for WOW animations
import "animate.css";

// Define a type for images from the content collection
type ContentImage = {
  src: string;
  width: number;
  height: number;
  format: "png" | "jpg" | "jpeg" | "tiff" | "webp" | "gif" | "svg" | "avif";
};

// Create a union type for preloadedImage
type PreloadedImage = GetImageResult | ContentImage;

interface Props {
  title: string;
  description: string;
  preloadedImage?: PreloadedImage; // optional - passing a preloadedImage to BaseLayout will 1. preload the image and 2. use the image for og socials tags in the <head>
}

const { description, title, preloadedImage } = Astro.props as Props;

---
<!-- A fully fleshed-out <head>, dynamically changing based on client.json and the page front matter -->
<html lang="nl">
        <head>
            <!-- View Transitions disabled as requested -->

            <!-- Standard meta tags -->
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta name="description" content={description}>
            <meta name="keywords" content="">
            <link rel="canonical" href={`https://${client.domain}${Astro.url.pathname}`}>

            <!-- If present, preloads the image passed as a prop -->
            {preloadedImage && <link rel="preload" href={preloadedImage.src} as="image" />}

            <!-- Google Fonts - Lato -->
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet">
            
            <!-- Social Media Display - generated automatically with the props passd to BaseLayout -->
            <meta property="og:title" content={title} />
            <meta property="og:description" content={description} />
            <meta property="og:type" content="website" />
            <meta property="og:url" content={`https://${client.domain}${Astro.url.pathname}`} />
            {
              preloadedImage && 
                <meta property="og:image" content={preloadedImage.src} /> 
                <meta property="og:image:secure_url" content={preloadedImage.src} />
            }
                
            <!-- Favicons -->
            <link rel="apple-touch-icon" href="/assets/images/logo.svg">
            <link rel="icon" type="image/svg+xml" href="/favicon.svg?v3">
            <link rel="sitemap" href="/sitemap-index.xml" />
            <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
            <link rel="alternate icon" href="/favicon.svg" type="image/svg+xml" />
            <link rel="manifest" href="/assets/favicons/site.webmanifest">
            <meta name="msapplication-TileColor" content="#da532c">
            <meta name="theme-color" content="#ffffff">
         
            <!-- For home page, use service keywords for the title, including location for SEO.
            Other pages should just include the page name.
            
            EXAMPLE:
            Home page - House Painting Contractors | Painters and Co. | TestCity, WA
            About Page - About us | Painters and Co.
            -->
            <title>
                {Astro.url.pathname === "/" ?  (`${ title }
                |
                ${ client.name }
                |
                ${ client.address.city },
                ${ client.address.state }`) :
                (`${ title }
                    |
                    ${ client.name }`)
            }
            </title>

            <!-- Sitewide Scripts -->
            <script src="@js/nav.js"></script>
        </head>
        <body>
            <!-- Screen reader skip main nav -->
            <a class="skip visually-hidden" aria-label="skip to main content" href="#main">Click To Skip To Main Content</a>
            <style>
                .visually-hidden {
                    position: absolute;
                    width: 1px;
                    height: 1px;
                    padding: 0;
                    margin: -1px;
                    overflow: hidden;
                    clip: rect(0, 0, 0, 0);
                    white-space: nowrap;
                    border: 0;
                }
            </style>
    
            <Header />
            <main id="main">
                <slot/>
            </main>
            <Footer />
    
        </body>
</html>

<script is:inline>
    // helper functions to toggle dark mode
    function enableDarkMode() {
      document.body.classList.add("dark-mode");
      localStorage.setItem("theme", "dark");
    }
  
    function disableDarkMode() {
      document.body.classList.remove("dark-mode");
      localStorage.setItem("theme", "light");
    }
  
    function setTheme() {
      // default to the light theme
      let theme = "light";
  
      // check localStorage for a saved 'theme' variable. if it's there, the user has visited before, so apply the necessary theme choices
      if (localStorage.getItem("theme")) {
        theme = localStorage.getItem("theme");
      }
      // if it's not there, check to see if the user has applied dark mode preferences themselves in the browser
      else if (
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches
      ) {
        theme = "dark";
      }
  
      // if there is no preference set, the default of light will be used. apply accordingly
      theme === "dark" ? enableDarkMode() : disableDarkMode();
    }
  
    setTheme();
  
    document.addEventListener("astro:after-swap", setTheme); // For View Transitions purposes - astro:after-swap ensures that the theme is kept after navigating to a new page.
</script>

<!-- WOW.js initialization -->
<script>
  // Add type declaration for WOW
  declare global {
    interface Window {
      WOW: any;
    }
  }
  
  // Import WOW.js using a script tag instead of ES module import
  document.addEventListener('astro:page-load', () => {
    // Initialize WOW.js when the page loads
    if (typeof window !== 'undefined') {
      // Check if WOW is already available (from the script tag)
      if (typeof window.WOW === 'function') {
        // Initialize WOW.js with options
        const wow = new window.WOW({
          boxClass: 'wow',      // animated element css class
          animateClass: 'animated', // animation css class
          offset: 50,          // distance to the element when triggering the animation
          mobile: true,        // enable animations on mobile devices
          live: true,          // continuously check for new WOW elements
          callback: function(box) {
            // callback when an element is animated
          },
          scrollContainer: null // optional scroll container selector
        });
        wow.init();
      }
    }
  });
</script>

<!-- Load WOW.js from CDN -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/wow/1.1.2/wow.min.js"></script>