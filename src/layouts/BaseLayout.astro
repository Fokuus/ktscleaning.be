---
// Page transitions disabled as requested
import type { GetImageResult } from 'astro';
import client from "@data/client.json";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import FooterCTA from "@components/FooterCTA.astro";
import "@styles/root.less";
import "@styles/dark.less";
import "@styles/hero.less";


// Define a type for images from the content collection
type ContentImage = {
  src: string;
  width: number;
  height: number;
  format: "png" | "jpg" | "jpeg" | "tiff" | "webp" | "gif" | "svg" | "avif";
};

// Create a union type for preloadedImage
type PreloadedImage = GetImageResult | ContentImage;

interface Props {
  title: string;
  description: string;
  preloadedImage?: PreloadedImage; // optional - passing a preloadedImage to BaseLayout will 1. preload the image and 2. use the image for og socials tags in the <head>
}

const { description, title, preloadedImage } = Astro.props as Props;

---
<!-- A fully fleshed-out <head>, dynamically changing based on client.json and the page front matter -->
<html lang="nl">
        <head>
            <!-- View Transitions disabled as requested -->

            <!-- Standard meta tags -->
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta name="description" content={description}>
            <meta name="keywords" content="crime scene cleaning, gespecialiseerde schoonmaak, industriële reiniging, technische ontmanteling, 24/7 schoonmaak, België, KTS Cleaning">
            <meta name="author" content="KTS Cleaning">
            <meta name="robots" content="index, follow">
            <link rel="canonical" href={`https://${client.domain}${Astro.url.pathname}`}>

            <!-- If present, preloads the image passed as a prop -->
            {preloadedImage && <link rel="preload" href={preloadedImage.src} as="image" />}

            <!-- Preconnect to external font domains -->
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link rel="preconnect" href="https://cdnjs.cloudflare.com">

            <!-- Critical CSS inlined for performance -->
            <style>
                /* Critical font fallback and basic layout */
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica', 'Arial', sans-serif;
                    margin: 0;
                    padding: 0;
                    overflow-x: hidden;
                    line-height: 1.6;
                }
                
                /* Critical navigation styles */
                #cs-navigation {
                    position: fixed;
                    top: 32px;
                    left: 50%;
                    transform: translateX(-50%);
                    z-index: 10000;
                    width: 94%;
                    max-width: 1440px;
                }
                
                .cs-container {
                    width: 100%;
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 0 1rem;
                }
                
                /* Critical hero styles */
                #hero-1806 {
                    padding-top: 200px;
                    position: relative;
                    z-index: 1;
                }
                
                .cs-title {
                    font-size: clamp(2.4375rem, 6.3vw, 5.25rem);
                    line-height: 1.2;
                    margin: 0 0 16px 0;
                    color: var(--headerColor);
                }
                
                /* CSS Variables */
                :root {
                    --primary: #fed500;
                    --primaryLight: #ffed4e;
                    --secondary: #2a2400;
                    --headerColor: #1a1a1a;
                    --bodyTextColor: #4e4b66;
                    --bodyTextColorWhite: #fafbfc;
                    --contentWidth: 75rem;
                    --contentWidthDesktop: 87.5rem;
                }
            </style>
            
            <!-- Google Fonts - Load async for performance -->
            <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet" media="print" onload="this.media='all'">
            <noscript><link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet"></noscript>
            
            <!-- Load Animate.css deferred for better performance -->
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" media="print" onload="this.media='all'">
            <noscript><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"></noscript>
            
            <!-- Social Media Display - generated automatically with the props passd to BaseLayout -->
            <meta property="og:title" content={title} />
            <meta property="og:description" content={description} />
            <meta property="og:type" content="website" />
            <meta property="og:url" content={`https://${client.domain}${Astro.url.pathname}`} />
            <meta property="og:site_name" content="KTS Cleaning" />
            <meta property="og:locale" content="nl_BE" />
            {
              preloadedImage && 
                <meta property="og:image" content={preloadedImage.src} /> 
                <meta property="og:image:secure_url" content={preloadedImage.src} />
            }
            
            <!-- Twitter Card tags -->
            <meta name="twitter:card" content="summary_large_image" />
            <meta name="twitter:title" content={title} />
            <meta name="twitter:description" content={description} />
            {
              preloadedImage && 
                <meta name="twitter:image" content={preloadedImage.src} />
            }
                
            <!-- Favicons -->
            <link rel="apple-touch-icon" href="/favicon.svg">
            <link rel="icon" type="image/svg+xml" href="/favicon.svg">
            <link rel="icon" type="image/png" href="/favicon.png">
            <link rel="sitemap" href="/sitemap-index.xml" />
            <link rel="manifest" href="/assets/favicons/site.webmanifest">
            <meta name="msapplication-TileColor" content="#fed500">
            <meta name="theme-color" content="#fed500">
         
            <!-- For home page, use service keywords for the title, including location for SEO.
            Other pages should just include the page name.
            
            EXAMPLE:
            Home page - House Painting Contractors | Painters and Co. | TestCity, WA
            About Page - About us | Painters and Co.
            -->
            <title>
                {Astro.url.pathname === "/" ?  (`${ title } | ${ client.name } | ${ client.address.city }, ${ client.address.state }`) :
                (`${ title } | ${ client.name }`)
            }
            </title>

            <!-- Sitewide Scripts -->
            <script src="@js/nav.js"></script>

            <!-- Back to Top Button Styles -->
            <style>
              .back-to-top-btn {
                position: fixed;
                bottom: 2rem;
                right: 2rem;
                width: 3rem;
                height: 3rem;
                background-color: var(--primary);
                color: #000;
                border: none;
                border-radius: 50%;
                cursor: pointer;
                z-index: 9999;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                transition: all 0.3s ease;
                opacity: 0;
                transform: translateY(20px);
              }

              .back-to-top-btn:hover {
                background-color: var(--primaryLight);
                transform: translateY(0) scale(1.1);
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
              }

              .back-to-top-btn.show {
                opacity: 1;
                transform: translateY(0);
              }

              .back-to-top-btn svg {
                width: 1.25rem;
                height: 1.25rem;
              }

              /* Dark mode styling */
              body.dark-mode .back-to-top-btn {
                background-color: var(--primary);
                color: #000;
              }

              body.dark-mode .back-to-top-btn:hover {
                background-color: var(--primaryLight);
              }

              /* Mobile adjustments */
              @media (max-width: 768px) {
                .back-to-top-btn {
                  bottom: 1.5rem;
                  right: 1.5rem;
                  width: 2.5rem;
                  height: 2.5rem;
                }

                .back-to-top-btn svg {
                  width: 1rem;
                  height: 1rem;
                }
              }
            </style>
        </head>
        <body>
            <!-- Screen reader skip main nav -->
            <a class="skip visually-hidden" aria-label="skip to main content" href="#main">Click To Skip To Main Content</a>
            <style>
                .visually-hidden {
                    position: absolute;
                    width: 1px;
                    height: 1px;
                    padding: 0;
                    margin: -1px;
                    overflow: hidden;
                    clip: rect(0, 0, 0, 0);
                    white-space: nowrap;
                    border: 0;
                }
            </style>
    
            <Header />
            <main id="main">
                <slot/>
            </main>
            <Footer />

            <!-- Back to Top Button -->
            <button 
              class="back-to-top-btn" 
              onclick="scrollToTop()" 
              id="back-to-up"
              aria-label="Back to top"
              style="display: none;"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"/>
              </svg>
            </button>


    
        </body>
</html>

<script is:inline>
    // helper functions to toggle dark mode
    function enableDarkMode() {
      document.body.classList.add("dark-mode");
      localStorage.setItem("theme", "dark");
    }
  
    function disableDarkMode() {
      document.body.classList.remove("dark-mode");
      localStorage.setItem("theme", "light");
    }
  
    function setTheme() {
      // default to the light theme
      let theme = "light";
  
      // check localStorage for a saved 'theme' variable. if it's there, the user has visited before, so apply the necessary theme choices
      if (localStorage.getItem("theme")) {
        theme = localStorage.getItem("theme");
      }
      // if it's not there, check to see if the user has applied dark mode preferences themselves in the browser
      else if (
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches
      ) {
        theme = "dark";
      }
  
      // if there is no preference set, the default of light will be used. apply accordingly
      theme === "dark" ? enableDarkMode() : disableDarkMode();
    }
  
    setTheme();
  
    document.addEventListener("astro:after-swap", setTheme); // For View Transitions purposes - astro:after-swap ensures that the theme is kept after navigating to a new page.

    // Back to Top Button Functionality
    function scrollToTop() {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }

    function toggleTopButton() {
      const backToTopBtn = document.getElementById('back-to-up');
      if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
        backToTopBtn.classList.add('show');
        backToTopBtn.style.display = 'flex';
      } else {
        backToTopBtn.classList.remove('show');
        // Delay hiding to allow fade out transition
        setTimeout(() => {
          if (!backToTopBtn.classList.contains('show')) {
            backToTopBtn.style.display = 'none';
          }
        }, 300);
      }
    }

    // Initialize back to top functionality
    window.addEventListener('scroll', toggleTopButton);
    
    // Re-initialize on page transitions
    document.addEventListener("astro:after-swap", () => {
      window.addEventListener('scroll', toggleTopButton);
    });
</script>

<!-- Modern scroll animations using Intersection Observer -->
<script is:inline>
  // Initialize scroll animations
  function initAnimations() {
    console.log('Initializing modern scroll animations...');
    setupScrollAnimations();
  }

  // Modern scroll animations using Intersection Observer
  function setupScrollAnimations() {
    console.log('Setting up subtle scroll animations...');
    
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const element = entry.target;
            
            // Get delay from data-wow-delay attribute
            const delayAttr = element.getAttribute('data-wow-delay');
            const delay = delayAttr ? parseFloat(delayAttr.replace('s', '')) * 1000 : 0;
            
            // Apply subtle animation after delay
            setTimeout(() => {
              element.style.visibility = 'visible';
              element.style.opacity = '1';
              element.style.transform = 'translateY(0px)';
              element.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';
            }, delay);
            
            observer.unobserve(element);
          }
        });
      }, {
        threshold: 0.15,
        rootMargin: '30px'
      });

      // Set initial state for elements and observe them
      document.querySelectorAll('.wow').forEach(el => {
        // Set initial subtle hidden state
        el.style.opacity = '0';
        el.style.transform = 'translateY(20px)';
        el.style.visibility = 'hidden';
        observer.observe(el);
      });
      
      console.log('Subtle animation setup complete');
    } else {
      // Very old browser - just show everything
      document.querySelectorAll('.wow').forEach(el => {
        el.style.visibility = 'visible';
        el.style.opacity = '1';
      });
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAnimations);
  } else {
    initAnimations();
  }

  // Re-initialize after page transitions (for Astro)
  document.addEventListener('astro:after-swap', initAnimations);
</script>