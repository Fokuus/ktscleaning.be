---
import BaseLayout from "@layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import "@styles/portfolio.less";

// Get all portfolio items from the CMS collection
const portfolioItems = await getCollection("portfolio");

// Sort by date (newest first)
const sortedItems = portfolioItems.sort((a, b) => {
  // Sort by date (newest first)
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Get unique categories for filtering
const categories = [...new Set(sortedItems.map(item => item.data.category))];

// Pagination settings
const itemsPerPage = 6;
const currentPage = 1; // Default to first page
const totalPages = Math.ceil(sortedItems.length / itemsPerPage);

// Get items for current page
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const currentItems = sortedItems.slice(startIndex, endIndex);
---

<BaseLayout title="Portfolio" description="Our portfolio of projects and case studies">
  <!-- Portfolio Hero -->
  <section class="portfolio-hero">
    <div class="portfolio-hero-content">
      <h1>Our Portfolio</h1>
      <p>Explore our latest projects and case studies</p>
    </div>
  </section>

  <!-- Portfolio Filters -->
  <section class="portfolio-filters">
    <div class="container">
      <div class="filter-buttons">
        <button class="filter-button active" data-category="all">All</button>
        {categories.map(category => (
          <button class="filter-button" data-category={category}>{category}</button>
        ))}
      </div>
    </div>
  </section>

  <!-- Portfolio Grid -->
  <section class="portfolio-section">
    <div class="portfolio-container">
      <div class="portfolio-grid">
        {currentItems.map((item) => {
          const slug = item.id.replace(/\.md$/, '');
          
          return (
            <a href={`/portfolio/${slug}`} class="portfolio-link" data-category={item.data.category}>
              <div class={`portfolio-item ${item.data.layout}`}>
                <div class="portfolio-image-wrapper">
                  <img src={item.data.image} alt={item.data.title} />
                </div>
                <div class="portfolio-overlay">
                  <h3>{item.data.title}</h3>
                  <p>{item.data.category}</p>
                </div>
              </div>
            </a>
          );
        })}
      </div>
      
      <!-- Pagination Controls -->
      {totalPages > 1 && (
        <div class="pagination">
          <button class="pagination-button" id="prev-page" disabled={currentPage === 1}>
            <span>&laquo; Previous</span>
          </button>
          <div class="pagination-numbers">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
              <button 
                class={`pagination-number ${page === currentPage ? 'active' : ''}`}
                data-page={page}
              >
                {page}
              </button>
            ))}
          </div>
          <button class="pagination-button" id="next-page" disabled={currentPage === totalPages}>
            <span>Next &raquo;</span>
          </button>
        </div>
      )}
    </div>
  </section>
</BaseLayout>

<style lang="less">
  .portfolio-hero {
    background-color: var(--primary);
    color: white;
    padding: 8rem 1rem;
    text-align: center;
    
    .portfolio-hero-content {
      max-width: 800px;
      margin: 0 auto;
      
      h1 {
        font-size: 3.5rem;
        font-weight: 900;
        margin-bottom: 1rem;
      }
      
      p {
        font-size: 1.2rem;
        opacity: 0.9;
      }
    }
  }
  
  .portfolio-filters {
    padding: 2rem 1rem;
    background-color: #f8f8f8;
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .filter-buttons {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 1rem;
      
      .filter-button {
        padding: 0.5rem 1.5rem;
        border: none;
        background-color: white;
        border-radius: 30px;
        font-size: 0.9rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        
        &:hover {
          background-color: #f0f0f0;
        }
        
        &.active {
          background-color: var(--primary);
          color: white;
        }
      }
    }
  }
  
  /* Pagination styles */
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 3rem;
    gap: 1rem;
    
    .pagination-button {
      padding: 0.5rem 1rem;
      border: none;
      background-color: var(--primary);
      color: white;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s ease;
      
      &:hover:not(:disabled) {
        background-color: darken(#0070f3, 10%);
      }
      
      &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
    }
    
    .pagination-numbers {
      display: flex;
      gap: 0.5rem;
      
      .pagination-number {
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        background-color: #f0f0f0;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        
        &:hover {
          background-color: #e0e0e0;
        }
        
        &.active {
          background-color: var(--primary);
          color: white;
        }
      }
    }
  }
  
  /* Dark mode styles */
  :global(body.dark-mode) {
    .portfolio-filters {
      background-color: rgba(0,0,0,0.2);
      
      .filter-buttons {
        .filter-button {
          background-color: rgba(255,255,255,0.1);
          color: var(--bodyTextColorWhite);
          
          &:hover {
            background-color: rgba(255,255,255,0.2);
          }
          
          &.active {
            background-color: var(--primary);
          }
        }
      }
    }
    
    .pagination {
      .pagination-button {
        background-color: var(--primary);
        
        &:hover:not(:disabled) {
          background-color: lighten(#0070f3, 5%);
        }
      }
      
      .pagination-numbers {
        .pagination-number {
          background-color: rgba(255,255,255,0.1);
          color: var(--bodyTextColorWhite);
          
          &:hover {
            background-color: rgba(255,255,255,0.2);
          }
          
          &.active {
            background-color: var(--primary);
          }
        }
      }
    }
  }
</style>

<script>
  // Client-side filtering and pagination
  document.addEventListener('DOMContentLoaded', () => {
    // Store all portfolio items in a variable for client-side manipulation
    const allPortfolioItems = Array.from(document.querySelectorAll('.portfolio-link'));
    const filterButtons = document.querySelectorAll('.filter-button');
    const itemsPerPage = 6;
    let currentPage = 1;
    let currentCategory = 'all';
    
    // Get pagination elements
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    const pageButtons = document.querySelectorAll('.pagination-number');
    const paginationContainer = document.querySelector('.pagination');
    
    // Filter items by category
    function filterItems(category) {
      currentCategory = category;
      currentPage = 1; // Reset to first page when changing filters
      
      // Get filtered items
      const filteredItems = allPortfolioItems.filter(item => {
        return category === 'all' || item.getAttribute('data-category') === category;
      });
      
      // Update pagination based on filtered items
      updatePagination(filteredItems);
      
      // Show items for the current page
      showItemsForCurrentPage(filteredItems);
      
      // Update active filter button
      filterButtons.forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-category') === category);
      });
    }
    
    // Update pagination controls based on filtered items
    function updatePagination(filteredItems) {
      const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
      
      // Hide pagination if only one page or no items
      if (totalPages <= 1) {
        paginationContainer.style.display = 'none';
      } else {
        paginationContainer.style.display = 'flex';
        
        // Update page number buttons
        pageButtons.forEach(btn => {
          const pageNum = parseInt(btn.getAttribute('data-page'));
          if (pageNum <= totalPages) {
            btn.style.display = 'flex';
            btn.classList.toggle('active', pageNum === currentPage);
          } else {
            btn.style.display = 'none';
          }
        });
        
        // Update prev/next buttons
        prevButton.disabled = currentPage === 1;
        nextButton.disabled = currentPage === totalPages;
      }
    }
    
    // Show items for the current page
    function showItemsForCurrentPage(filteredItems) {
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, filteredItems.length);
      
      // Hide all items first
      allPortfolioItems.forEach(item => {
        item.style.display = 'none';
      });
      
      // Show only the items for the current page and filter
      filteredItems.slice(startIndex, endIndex).forEach(item => {
        item.style.display = 'block';
      });
    }
    
    // Go to a specific page
    function goToPage(page) {
      currentPage = page;
      
      // Get currently filtered items
      const filteredItems = allPortfolioItems.filter(item => {
        return currentCategory === 'all' || item.getAttribute('data-category') === currentCategory;
      });
      
      // Update pagination UI
      updatePagination(filteredItems);
      
      // Show items for the current page
      showItemsForCurrentPage(filteredItems);
    }
    
    // Add event listeners to filter buttons
    filterButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const category = button.getAttribute('data-category');
        filterItems(category);
      });
    });
    
    // Add event listeners to pagination buttons
    pageButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const page = parseInt(button.getAttribute('data-page'));
        goToPage(page);
      });
    });
    
    // Add event listeners to prev/next buttons
    prevButton.addEventListener('click', (e) => {
      e.preventDefault();
      if (currentPage > 1) {
        goToPage(currentPage - 1);
      }
    });
    
    nextButton.addEventListener('click', (e) => {
      e.preventDefault();
      const filteredItems = allPortfolioItems.filter(item => {
        return currentCategory === 'all' || item.getAttribute('data-category') === currentCategory;
      });
      const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
      
      if (currentPage < totalPages) {
        goToPage(currentPage + 1);
      }
    });
    
    // Initialize with 'all' filter
    filterItems('all');
  });
</script>
