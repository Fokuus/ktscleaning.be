---
import "@styles/sidebar.less";

interface Heading {
	depth: number; // The heading level (h1 = 1, h2 = 2, etc)
	slug: string; // The ID of the heading for linking
	text: string; // The text content of the heading
}

interface Props {
	headings: Heading[]; // Array of headings from your markdown content
	levels?: 1 | 2 | 3; // How many levels of headers to show in TOC (default: 2)
}

const { headings, levels = 2 } = Astro.props as Props;

// Filter headings to only show up to the specified level
const filteredHeadings = headings.filter((heading) => heading.depth <= levels);
---

	<ul class="cs-toc-list wow animate__fadeInLeft">
		{
			filteredHeadings.map((heading, index) => (
				<li class={`cs-toc-item depth-${heading.depth} wow animate__fadeInLeft`} data-wow-delay={`${0.1 + index * 0.1}s`}>
					<a href={`#${heading.slug}`} class="cs-toc-link">
						{heading.text}
					</a>
				</li>
			))
		}
	</ul>

<style lang="less">
	.cs-toc-container {
		border-radius: 0.5em;
		border: 1px solid #ebebeb;
		padding-bottom: 0rem !important; 
        margin-bottom: 0rem ;
	}

	.cs-toc-list {
		margin: 0;
		padding: 0;
		font-size: 1rem;
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
		list-style: none;
	}

	.cs-toc-item {
		position: relative;
		padding-left: 1.25rem;

		&::before {
			content: "";
			width: 0.5rem;
			height: 0.5rem;
			background-color: var(--primary);
			position: absolute;
			left: 0;
			top: 0.5rem;
			transform: rotate(45deg);
		}

		&.depth-2 {
			padding-left: 1.25rem;
		}
		&.depth-3 {
			padding-left: 2rem;
		}
		&:has(.cs-toc-current) {
			&::before {
				background-color: var(--primary);
			}
		}
	}

	.cs-toc-link {
		transition: color 0.2s ease-in-out;
		color: var(--headerColor);
		text-decoration: none;
		line-height: 1.5em;
		display: block;
		scroll-behavior: smooth;

		&.cs-toc-current {
			color: var(--primary);
			font-weight: 700;
		}
		&:hover {
			color: var(--primary);
		}
	}

    @media only screen and (min-width: 64rem) {
        .cs-toc-container {
            margin-bottom: 0;
        }
    }

    /* Dark Mode */
    @media only screen and (min-width: 0em) {
    body.dark-mode {
        .cs-toc-item {
            &::before {
                background-color: var(--primary);
            }
        }

        .cs-toc-link {
            color: var(--bodyTextColorWhite);
			&.cs-toc-current {
				color: var(--primary);
			}
			&:hover {
				color: var(--primary);
			}
        }
    }
}
</style>

<script>
	// Wrapper for Blog post content
	let wrappingElement: Element | null;
	let observeHeaderTags: IntersectionObserver;
	let allHeaderTags: NodeListOf<Element>;
	let isDesktop = window.matchMedia("(min-width: 1024px)").matches;

	// Add smooth scrolling to TOC links
	function addSmoothScrolling() {
		const tocLinks = document.querySelectorAll('.cs-toc-link');
		
		tocLinks.forEach(link => {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				const targetId = link.getAttribute('href')?.substring(1);
				const targetElement = document.getElementById(targetId || '');
				
				if (targetElement) {
					const headerOffset = 100; // Adjust this value based on your header height
					const elementPosition = targetElement.getBoundingClientRect().top;
					const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

					window.scrollTo({
						top: offsetPosition,
						behavior: 'smooth'
					});
				}
			});
		});
	}

	// Function that runs when the Intersection Observer fires
	function setCurrent(entries: any[]) {
		const tocWrapper = document.querySelector("#desktop-toc");
		if (!tocWrapper) return;

		const allSectionLinks = tocWrapper.querySelectorAll(".cs-toc-link");

		entries.forEach((entry: { isIntersecting: any; target: { id: any; }; }) => {
			if (entry.isIntersecting) {
				allSectionLinks.forEach((link) => link.classList.remove("cs-toc-current"));
				const targetLink = tocWrapper.querySelector(`a[href="#${entry.target.id}"].cs-toc-link`);
				if (targetLink) targetLink.classList.add("cs-toc-current");
			}
		});
	}

	function initTOC() {
		// Add smooth scrolling to all TOC links
		addSmoothScrolling();

		// Check if it's desktop for intersection observer
		if (!window.matchMedia("(min-width: 64rem)").matches) return;

		// Find all sections with IDs that match our TOC links
		const allSections = document.querySelectorAll('[id]');
		if (!allSections.length) return;

		// Intersection Observer Options
		let options = {
			root: null,
			rootMargin: "0px 0px -50% 0px",
			threshold: [0.1],
		};

		// Create Observer
		observeHeaderTags = new IntersectionObserver(setCurrent, options);
		allSections.forEach((section) => observeHeaderTags.observe(section));
	}

	// Run on initial page load
	initTOC();

	// Re-run on view transitions navigation
	document.addEventListener("astro:after-swap", () => {
		initTOC();
	});

	// Listen for screen size changes
	window.matchMedia("(min-width: 64rem)").addEventListener("change", (e) => {
		if (e.matches) {
			initTOC();
		} else {
			// Clean up observer when switching to mobile but keep smooth scrolling
			if (observeHeaderTags) observeHeaderTags.disconnect();
			addSmoothScrolling();
		}
	});
</script>

