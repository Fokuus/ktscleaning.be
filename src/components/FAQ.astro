---
interface FAQItem {
  question: string;
  answer: string;
  isActive?: boolean;
}

interface Props {
  title?: string;
  topper?: string;
  faqs?: FAQItem[];
}

const {
  title = "Veelgestelde Vragen",
  topper = "FAQ's",
  faqs = [
    {
      question: "Wat is crime scene cleaning en wanneer heb ik dit nodig?",
      answer: "Crime scene cleaning is de gespecialiseerde reiniging van locaties waar geweld, ongevallen of overlijden hebben plaatsgevonden. Dit omvat het veilig verwijderen van biologische materialen, bloed en andere gevaarlijke stoffen. KTS Cleaning werkt samen met politie, hulpdiensten en verzekeraars om deze gevoelige situaties professioneel en discreet af te handelen.",
      isActive: true
    },
    {
      question: "Hoe snel kunnen jullie ter plaatse zijn voor een spoedopdracht?",
      answer: "Wij zijn 24/7 bereikbaar voor noodsituaties. Voor spoedeisende opdrachten zoals crime scene cleaning of acute vervuiling streven we ernaar binnen 2-4 uur ter plaatse te zijn. Ons ervaren team staat altijd paraat met de juiste uitrusting en certificeringen."
    },
    {
      question: "Welke certificeringen en verzekeringen hebben jullie?",
      answer: "KTS Cleaning beschikt over alle benodigde certificeringen voor gevaarlijke stoffen, industriÃ«le reiniging en crime scene cleaning. Wij zijn volledig verzekerd en gecertificeerd voor het werken met biohazards, chemische stoffen en asbest. Al onze medewerkers hebben specifieke trainingen gevolgd voor hun specialisatie."
    },
    {
      question: "Hoe werkt de samenwerking met verzekeraars en overheidsdiensten?",
      answer: "Als erkend partner van politiediensten, gemeentes en verzekeraars hanteren wij vaste procedures en tariefafspraken. Wij zorgen voor alle benodigde documentatie en certificaten. In veel gevallen wordt onze dienstverlening vergoed door de verzekeraar, afhankelijk van uw polis en de situatie."
    },
    {
      question: "Wat zijn jullie tarieven en hoe wordt er gefactureerd?",
      answer: "Onze tarieven zijn afhankelijk van het type opdracht, de omvang en complexiteit. Wij bieden altijd een gratis offerte aan na inspectie ter plaatse. Voor spoedeisende opdrachten hanteren we vaste uurtarieven. Particulieren krijgen vooraf duidelijkheid over alle kosten, bedrijven kunnen rekenen op scherpe contracttarieven."
    }
  ]
} = Astro.props;
---

<section id="faq-326">
  <div class="cs-container">
    <div class="cs-content wow animate__fadeInUp">
      <span class="cs-topper">{topper}</span>
      <h2 class="cs-title">{title}</h2>
    </div>
    <div class="cs-flex-group">
      <ul class="cs-faq-group">
        {faqs.map((faq, index) => (
          <li class={`cs-faq-item ${faq.isActive ? 'active' : ''} wow animate__fadeInUp`} data-wow-delay={`${0.1 + index * 0.1}s`}>
            <button class="cs-button">
              <span class="cs-button-text">
                {faq.question}
              </span>
            </button>
            <p class="cs-item-p">
              {faq.answer}
            </p>
          </li>
        ))}
      </ul>
    </div>
  </div>
</section>

<script>
  // Function to initialize FAQ accordions
  function initFAQ() {
    const faqContainer = document.querySelector(".cs-faq-group");
    if (!faqContainer) return;

    const faqItems = document.querySelectorAll(".cs-faq-item");
    faqItems.forEach(item => {
      // Ensure item is an HTMLElement
      if (item instanceof HTMLElement) {
        const button = item.querySelector('.cs-button');
        if (button) {
          // Add click event listener to the button
          button.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Get all FAQ items again to ensure we have the current state
            const allItems = document.querySelectorAll(".cs-faq-item");
            
            // Close all other items
            allItems.forEach(otherItem => {
              if (otherItem !== item && otherItem.classList.contains('active')) {
                otherItem.classList.remove('active');
              }
            });
            
            // Toggle the clicked item
            item.classList.toggle("active");
          });
        }
      }
    });
  }

  // Run on initial page load
  initFAQ();
  
  // Also run when navigating between pages with View Transitions
  document.addEventListener('astro:page-load', initFAQ);
</script>

<style lang="less">
  /* Mobile - 360px */
  @media only screen and (min-width: 0rem) {
    #faq-326 {
      padding: var(--sectionPadding);
      position: relative;

      .cs-container {
        margin: 2em auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        /* 48px - 64px */
        gap: clamp(3rem, 6vw, 4rem);
      }

      .cs-flex-group {
        width: 100%;
        /* Smaller min-height for mobile */
        min-height: 24rem;
      }

      .cs-content {
        /* set text align to left if content needs to be left aligned */
        text-align: center;
        width: 100%;
        display: flex;
        flex-direction: column;
        /* centers content horizontally, set to flex-start to left align */
        align-items: center;
      }

      .cs-topper {
        font-family: 'Lato', sans-serif;
        font-size: var(--topperFontSize);
        font-weight: 700;
        line-height: 1.2em;
        text-transform: uppercase;
        letter-spacing: 0.1em;
        color: var(--secondary);
        display: block;
        margin-bottom: (4/16rem);
      }

      .cs-title {
        font-family: 'Lato', sans-serif;
        font-size: var(--headerFontSize);
        font-weight: 900;
        line-height: 1.2em;
        color: var(--headerColor);
        max-width: 15ch;
        margin: 0 0 (32/16rem);
      }

      .cs-faq-group {
        width: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        gap: (12/16rem);
        /* Smaller min-height for mobile */
        min-height: 20rem;
      }

      .cs-faq-item {
        list-style: none;
        width: 100%;
        background-color: #f7f7f7;
        /* clips all corners of the button that overlap the border */
        overflow: hidden;
        transition: all 0.3s ease-in-out;

        &.active {
          .cs-button {
            background-color: var(--primary);
            color: var(--secondaryLight);

            &:before {
              background-color: var(--secondaryLight);
              transform: rotate(315deg);
            }

            &:after {
              background-color: var(--secondaryLight);
              transform: rotate(-315deg);
            }
          }

          .cs-item-p {
            max-height: 500px; /* Large enough to fit content */
            /* 20px - 24px top & bottom */
            /* 16px - 24px left & right */
            padding: clamp(1.25rem, 1.3vw, 1.5rem) clamp(1rem, 2vw, 1.5rem);
            opacity: 1;
          }
        }
      }

      .cs-button {
        font-family: 'Lato', sans-serif;
        font-size: (16/16rem);
        font-weight: 700;
        line-height: 1.2em;
        text-align: left;
        /* 16px - 20px */
        padding: clamp(1rem, 1.3vw, 1.25rem);
        background-color: #f7f7f7;
        border: none;
        color: var(--headerColor);
        display: block;
        width: 100%;
        position: relative;
        transition: all 0.3s ease-in-out;
      }

      .cs-button:hover {
        cursor: pointer;
      }

      .cs-button:before {
        /* left line */
        content: "";
        width: calc(8rem / 16);
        height: calc(2rem / 16);
        background-color: var(--headerColor);
        opacity: 1;
        position: absolute;
        top: 50%;
        right: calc(24rem / 16);
        transform: rotate(45deg);
        transition: transform 0.3s ease-in-out, background-color 0.3s;
      }

      .cs-button:after {
        /* right line */
        content: "";
        width: calc(8rem / 16);
        height: calc(2rem / 16);
        background-color: var(--headerColor);
        opacity: 1;
        position: absolute;
        top: 50%;
        right: calc(24rem / 16);
        transform: rotate(-45deg);
        transition: transform 0.3s ease-in-out, background-color 0.3s;
      }

      .cs-item-p {
        font-family: 'Lato', sans-serif;
        font-size: var(--bodyFontSize);
        font-weight: 300;
        line-height: 1.5em;
        color: var(--bodyTextColor);
        margin: 0;
        height: auto;
        max-height: 0;
        padding: 0 clamp(1rem, 2vw, 1.5rem);
        opacity: 0;
        overflow: hidden;
        transition: all 0.3s ease-in-out;
      }
    }
  }

  /* Tablet - 768px */
  @media only screen and (min-width: 48rem) {
    #faq-326 {
      .cs-gallery {
        max-width: (1720/16rem);
      }

      .cs-picture {
        grid-column: span 1;
      }

      .cs-flex-group {
        min-height: 28rem;
      }

      .cs-faq-group {
        min-height: 24rem;
      }
    }
  }

  /* Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    #faq-326 {
      .cs-container {
        flex-direction: row;
        justify-content: space-between;
        align-items: stretch;
      }

      .cs-content {
        text-align: left;
        width: 40%;
        align-items: flex-start;
        /* prevents flexbox from squishing it */
        flex: none;
      }

      .cs-flex-group {
        min-height: 32rem;
      }

      .cs-faq-group {
        min-height: 28rem;
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 0rem) {
    body.dark-mode {
      #faq-326 {
        .cs-title,
        .cs-item-p {
          color: var(--bodyTextColorWhite);
        }

        .cs-topper {
          color: var(--primaryLight);
        }

        .cs-faq-item {
          background-color: var(--accent);
          
          &.active {
            .cs-button {
              background-color: var(--secondary);
              color: var(--bodyTextColorWhite);

              &:before,
              &:after {
                background-color: var(--bodyTextColorWhite);
              }
            }

            .cs-item-p {
              /* 20px - 24px */
              padding-top: clamp(1.25rem, 1.3vw, 1.5rem);
              border-color: var(--accent);
            }
          }
        }

        .cs-button {
          color: var(--bodyTextColorWhite);
          border-color: var(--accent);
          background-color: var(--accent);

          &:before,
          &:after {
            background-color: var(--bodyTextColorWhite);
          }
        }
      }
    }
  }
</style>
