---
import PhoneCTA from "./PhoneCTA.astro";
---

<!-- ============================================ -->
<!--                    Services                  -->
<!-- ============================================ -->

<section id="services-1252">
    <div class="cs-container">
        <div class="cs-content">
            <div class="cs-flex-group">
                <span class="cs-topper">Onze Diensten</span>
                <h2 class="cs-title">Gespecialiseerde Reinigingsdiensten</h2>
            </div>
            <p class="cs-text">
                <PhoneCTA />
            </p>
        </div>
        <ul class="cs-card-group">
            <li class="cs-item wow animate__fadeInUp" data-wow-delay="0.1s">
                <a href="/diensten/crime-scene-cleaning" class="cs-link">
                    <h3 class="cs-h3">Crime Scene Cleaning</h3>
                    <p class="cs-item-text">
                        <span class="cs-subservice">REINIGING PLAATS DELICT</span>
                        <span class="cs-subservice">SCHOONMAAK EN ONTSMETTING CELLEN</span>
                        <span class="cs-subservice">ONTMANTELING CANNABISPLANTAGES</span>
                    </p>
                </a>
                <picture class="cs-item-background">
                    <source media="(max-width: 600px)" srcset="/assets/images/gecontamineerde-voertuigen.webp">
                    <source media="(min-width: 601px)" srcset="/assets/images/gecontamineerde-voertuigen.webp">
                    <img decoding="async" src="/assets/images/gecontamineerde-voertuigen.webp" alt="Crime Scene Cleaning" width="413" height="374" aria-hidden="true">
                </picture>
            </li>
            <li class="cs-item wow animate__fadeInUp" data-wow-delay="0.3s">
                <a href="/diensten/gespecialiseerde-schoonmaak" class="cs-link">
                    <h3 class="cs-h3">Gespecialiseerde Schoonmaak</h3>
                    <p class="cs-item-text">
                        <span class="cs-subservice">ZWAAR VERVUILDE WONINGEN</span>
                        <span class="cs-subservice">BRANDSCHADE WATERSCHADE</span>
                        <span class="cs-subservice">ONTRUIMING INBOEDEL</span>
                    </p>
                </a>
                <picture class="cs-item-background">
                    <source media="(max-width: 600px)" srcset="/assets/images/gespecialiseerde-schoonmaak-01.jpg">
                    <source media="(min-width: 601px)" srcset="/assets/images/gespecialiseerde-schoonmaak-01.jpg">
                    <img decoding="async" src="/assets/images/gespecialiseerde-schoonmaak-01.jpg" alt="Gespecialiseerde Schoonmaak" width="413" height="374" aria-hidden="true">
                </picture>
            </li>
            <li class="cs-item wow animate__fadeInUp" data-wow-delay="0.5s">
                <a href="/diensten/industriele-reiniging" class="cs-link">
                    <h3 class="cs-h3">Industriële Reiniging</h3>
                    <p class="cs-item-text">
                        <span class="cs-subservice">REINIGING PRODUCTIELIJNEN</span>
                        <span class="cs-subservice">BINNENONTMANTELING</span>
                        <span class="cs-subservice">TANK & SILO REINIGING</span>
                    </p>
                </a>
                <picture class="cs-item-background">
                    <source media="(max-width: 600px)" srcset="/assets/images/industriele-reiniging-productielijnen.webp">
                    <source media="(min-width: 601px)" srcset="/assets/images/industriele-reiniging-productielijnen.webp">
                    <img decoding="async" src="/assets/images/industriele-reiniging-productielijnen.webp" alt="Industriële Reiniging" width="413" height="374" aria-hidden="true">
                </picture>
            </li>
        </ul>
    </div>
  </section>
                                
  
  <style lang="less">
    /*-- -------------------------- -->
  <---          Services          -->
  <--- -------------------------- -*/
  
  /* Mobile - 360px */
  @media only screen and (min-width: 0rem) {
      #services-1252 {
          padding: var(--sectionPadding);
          position: relative;
          z-index: 10;
  
          .cs-container {
              display: flex;
              justify-content: center;
              align-items: center;
              flex-direction: column;
              gap: 3rem;
              
              /* Tablet - smaller gap */
              @media only screen and (max-width: 48rem) {
                  gap: clamp(2rem, 4vw, 3rem);
              }
              
              /* Mobile - even smaller gap */
              @media only screen and (max-width: 30rem) {
                  gap: 0rem;
              }
          }
  
          .cs-content {
              /* set text align to left if content needs to be left aligned */
              text-align: left;
              width: 100%;
              display: flex;
              flex-direction: column;
              /* centers content horizontally, set to flex-start to left align */
              align-items: flex-start;
              gap: 0.3rem;
              
              @media only screen and (max-width: 47.9375rem) {
                  flex-direction: column-reverse;
                  align-items: center;
                  text-align: center;
                  gap: .5rem;
              }
          }
  
          .cs-title {
              max-width: 20ch;
          }
  
          .cs-card-group {
              margin: 0;
              padding: 0;
              width: 100%;
              display: grid;
              grid-template-columns: repeat(12, 1fr);
              /* 16px - 20px */
              gap: clamp(1rem, 2vw, 1.25rem);
          }
  
          .cs-item {
              width: 100%;
              text-align: left;
              list-style: none;
              margin: 0;
              padding: 0;
              background-color: #f8f8f8;
              border: 1px solid #cccccc;
              /* clips background image corners */
              overflow: hidden;
              box-shadow: 0px 12px 40px 0px rgba(26, 26, 26, 0.06);
              /* prevents padding and border from affecting height and width */
              box-sizing: border-box;
              grid-column: span 12;
              grid-row: span 1;
              display: flex;
              flex-direction: column;
              align-items: flex-start;
              justify-content: flex-end;
              position: relative;
              z-index: 1;
              transition: transform 0.05s ease-out, border-color 0.3s ease;
              will-change: transform;
  
              &:hover {
                  border-color: #999999;
                  
                  .cs-item-background {
                      img {
                          opacity: 0.7;
                          transform: translateY(-10%) scale(1.1);
                      }
                  }
  
                  .cs-h3 {
                      color: var(--primary);
                  }
              }
  
              &:before {
                  content: "";
                  width: 100%;
                  height: 100%;
                  border: 1px solid rgba(255, 255, 255, 0.4);
                  /* prevents border from affecting height and width */
                  box-sizing: border-box;
                  /* prevents the mouse from interacting with it so when you hover hover the other elements inside the card it doesn't block your mouse from hovering over them */
                  pointer-events: none;
                  opacity: 1;
                  position: absolute;
                  display: block;
                  top: 0;
                  left: 0;
                  z-index: 10;
              }

              &::after {
                  content: '';
                  width: (40/16rem);
                  height: (40/16rem);
                  background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' fill='none' stroke='%23fed500' stroke-width='1' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M5 12h14'/%3E%3Cpath d='M13 5l7 7-7 7'/%3E%3C/svg%3E");
                  background-size: contain;
                  background-repeat: no-repeat;
                  position: absolute;
                  top: (24/16rem);
                  right: (24/16rem);
                  transform: rotate(-45deg);
                  transition: transform 0.3s ease;
                  pointer-events: none;
                  z-index: 15;
              }
          }
  
          .cs-link {
              text-decoration: none;
              /* 125px - 236px */
              /* padding goes on the link, not the cs-item as is normal. We do this because we want the whole card to be hoverable. So we add the padding to the link tag to create the space inside the card. By adding the space inside the cs-link tag we can make the whole card hoverable since the padding is now contributing to the height and widht of the link */
              padding: clamp(7.8125rem, 19vw, 14.75rem) (24/16rem) (24/16rem);
              position: relative;
              display: block;
          }
  
          .cs-h3 {
              /* 18px - 22px */
              font-size: clamp(1.125rem, 2vw, 1.375rem);
              font-weight: 700;
              line-height: 1.2em;
              text-align: inherit;
              margin: 0 0 (12/16rem) 0;
              color: var(--headerColor);
              transition: color 0.3s;
          }
  
          .cs-item-text {
              /* 14px - 16px */
              font-size: clamp(0.875rem, 1.5vw, 1rem);
              line-height: 1.5em;
              max-width: (450/16rem);
              margin: 0;
              padding: 0;
              color: var(--bodyTextColor);
              display: flex;
              flex-direction: column;
              gap: (8/16rem);
          }

          .cs-subservice {
              font-size: .75rem;
              font-weight: 400;
              letter-spacing: 0.15em;
              text-transform: uppercase;
              color: #666666;
              line-height: 1.3em;
              display: block;
              margin: 0;
          }
  
          .cs-item-background {
              width: 100%;
              height: 100%;
              display: block;
              position: absolute;
              top: 0;
              left: 0;
              z-index: -1;
  
              &:before {
                  /* light background overlay for better text readability */
                  content: "";
                  position: absolute;
                  display: block;
                  height: 100%;
                  width: 100%;
                  background: rgba(255, 255, 255, 0.85);
                  top: 0;
                  left: 0;
                  z-index: 1;
              }
  
              &:after {
                  /* subtle gradient overlay for text area */
                  content: "";
                  position: absolute;
                  display: block;
                  height: 60%;
                  width: 100%;
                  background: linear-gradient(
                      to bottom,
                      rgba(255, 255, 255, 0) 0%,
                      rgba(255, 255, 255, 0.95) 100%
                  );
                  bottom: 0;
                  left: 0;
                  z-index: 2;
              }
  
              img {
                  position: absolute;
                  top: 0;
                  left: 0;
                  height: 120%;
                  width: 100%;
                  /* Makes img tag act as a background image */
                  object-fit: cover;
                  transform: translateY(-10%);
                  transition:
                      transform 0.6s,
                      opacity 0.3s;
                  will-change: transform;
              }
          }
      }
  }
  
  /* Tablet - 768px */
  @media only screen and (min-width: 48rem) {
      #services-1252 {
  
          .cs-content {
              flex-direction: row;
              justify-content: space-between;
              align-items: center;
              gap: 0rem;
          }
  
          .cs-title {
              margin: 0;
          }
  
          .cs-flex-group {
              width: 50%;
              
              @media only screen and (max-width: 47.9375rem) {
                  width: 100%;
                  align-items: center;
              }
          }
  
          .cs-item {
              grid-column: span 6;
          }
      }
  }
  
  /* Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
      #services-1252 {
          .cs-item {
              grid-column: span 4;
          }
      }
  }
  
  /* Dark Mode */
  @media only screen and (min-width: 0rem) {
      body.dark-mode {
          #services-1252 {
              .cs-title,
              .cs-text {
                  color: var(--bodyTextColorWhite);
              }
  
              .cs-text {
                  opacity: 0.8;
              }
          }
      }
  }
  
                                  
  </style>

    <script>
    // Parallax effect for service card images and cards
    function initParallax() {
      const cards = document.querySelectorAll('#services-1252 .cs-item');
      
      function updateParallax() {
        cards.forEach(card => {
          const img = card.querySelector('.cs-item-background img') as HTMLImageElement;
          const cardElement = card as HTMLElement;
          if (!img || !cardElement) return;
          
          const rect = card.getBoundingClientRect();
          const cardTop = rect.top;
          const cardHeight = rect.height;
          const windowHeight = window.innerHeight;
          const cardCenter = cardTop + cardHeight / 2;
          const windowCenter = windowHeight / 2;
          
          // Check if card is in viewport (with extended range for smoother effect)
          if (cardTop < windowHeight + 100 && cardTop + cardHeight > -100) {
            // Calculate parallax offset based on distance from center
            const distanceFromCenter = (windowCenter - cardCenter) / windowHeight;
            
            // Check if card is being hovered
            const isHovered = card.matches(':hover');
            const hoverScale = isHovered ? 'scale(1.1)' : 'scale(1)';
            
            // Image parallax (more subtle) with hover effect
            const imageParallaxValue = distanceFromCenter * 8;
            img.style.transform = `translateY(${-10 + imageParallaxValue}%) ${hoverScale}`;
            
            // Card parallax (more noticeable movement)
            const cardParallaxValue = distanceFromCenter * 12;
            cardElement.style.transform = `translateY(${cardParallaxValue}px)`;
          }
        });
      }
      
      // More responsive scroll handling - reduced throttling
      let ticking = false;
      function onScroll() {
        if (!ticking) {
          requestAnimationFrame(updateParallax);
          ticking = true;
          setTimeout(() => { ticking = false; }, 8); // Faster response time
        }
      }
      
      // Add hover event listeners to each card for immediate hover response
      cards.forEach(card => {
        card.addEventListener('mouseenter', updateParallax, { passive: true });
        card.addEventListener('mouseleave', updateParallax, { passive: true });
      });
      
      // Initialize parallax on load and scroll
      updateParallax();
      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('resize', updateParallax, { passive: true });
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initParallax);
    } else {
      initParallax();
    }
  </script>